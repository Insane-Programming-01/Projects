n = 9

def display(grid):
    
    for i in range(n):
        for j in range(n):
            print(grid[i][j], end=' ')
        print()

def validation(grid, row, col, num):
    
    # Check for row

    for x in range(9):
        if grid[row][x] == num:
            return False
        
    # check for column

    for x in range(9):
        if grid[x][col] == num:
            return False
        
    # check for 3x3 grid

    startRow = row - row % 3
    startCol = col - col % 3 # 2 

    for i in range(3):
        for j in range(3):
            if grid[i + startRow][j + startCol] == num:
                return False
            
    return True

def solveSudoku(grid, row, col):
    
    # Check for end 

    if row == n-1 and col == n:
        return True
    
    if col == n:
        row += 1
        col = 0

    if grid[row][col] != 0:
        return solveSudoku(grid, row, col+1)
    
    for num in range(1,n+1):

        if validation(grid, row, col, num):
            
            grid[row][col] = num

            if solveSudoku(grid, row, col+1):
                return True

        grid[row][col] = 0

    return False
    
grid = [[3, 0, 6, 5, 0, 8, 4, 0, 0],
		[5, 2, 0, 0, 0, 0, 0, 0, 0],
		[0, 8, 7, 0, 0, 0, 0, 3, 1],
		[0, 0, 3, 0, 1, 0, 0, 8, 0],
		[9, 0, 0, 8, 6, 3, 0, 0, 5],
		[0, 5, 0, 0, 9, 0, 6, 0, 0],
		[1, 3, 0, 0, 0, 0, 2, 5, 0],
		[0, 0, 0, 0, 0, 0, 0, 7, 4],
		[0, 0, 5, 2, 0, 6, 3, 0, 0]]

if solveSudoku(grid, 0, 0):
    display(grid)
else:
    print("No solution Exists!")
